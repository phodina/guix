From d27b59df5e6dfc7e3b2d9dbed5e1564c486aae80 Mon Sep 17 00:00:00 2001
From: Joseph Chen <chenjh@rock-chips.com>
Date: Thu, 19 Sep 2019 16:09:12 +0800
Subject: [PATCH 1/3] dm: pmic: add pmic_shutdown() interface

It is a common requirement to shutdown some PMIC. Provide some
simple convenience functions to do this.

Signed-off-by: Joseph Chen <chenjh@rock-chips.com>
Signed-off-by: Elaine Zhang <zhangqing@rock-chips.com>
---
 drivers/power/pmic/pmic-uclass.c | 11 +++++++++++
 include/power/pmic.h             |  9 +++++++++
 2 files changed, 20 insertions(+)

diff --git a/drivers/power/pmic/pmic-uclass.c b/drivers/power/pmic/pmic-uclass.c
index 5dcf6d8079d..be7089d9722 100644
--- a/drivers/power/pmic/pmic-uclass.c
+++ b/drivers/power/pmic/pmic-uclass.c
@@ -194,6 +194,17 @@ static int pmic_pre_probe(struct udevice *dev)
 	return 0;
 }
 
+
+int pmic_shutdown(struct udevice *dev)
+{
+	const struct dm_pmic_ops *ops = dev_get_driver_ops(dev);
+
+	if (!ops || !ops->shutdown)
+		return -ENOSYS;
+
+	return ops->shutdown(dev);
+}
+
 UCLASS_DRIVER(pmic) = {
 	.id		= UCLASS_PMIC,
 	.name		= "pmic",
diff --git a/include/power/pmic.h b/include/power/pmic.h
index be9de6b4de7..231195e5ea8 100644
--- a/include/power/pmic.h
+++ b/include/power/pmic.h
@@ -164,6 +164,7 @@ struct dm_pmic_ops {
 	int (*read)(struct udevice *dev, uint reg, uint8_t *buffer, int len);
 	int (*write)(struct udevice *dev, uint reg, const uint8_t *buffer,
 		     int len);
+	int (*shutdown)(struct udevice *dev);
 };
 
 /**
@@ -306,6 +307,14 @@ struct uc_pmic_priv {
 	uint trans_len;
 };
 
+/**
+ * pmic_shutdown() - power off supplies of PMIC
+ *
+ * @dev:	PMIC device to update
+ * @return 0 on success or negative value of errno.
+ */
+int pmic_shutdown(struct udevice *dev);
+
 #endif /* CONFIG_DM_PMIC */
 
 #ifdef CONFIG_POWER
-- 
2.34.0


From 8ae5ab580d89ed86f26b0b828b0a00adf7a451da Mon Sep 17 00:00:00 2001
From: Joseph Chen <chenjh@rock-chips.com>
Date: Thu, 19 Sep 2019 16:09:27 +0800
Subject: [PATCH 2/3] power: pmic: rk8xx: add pmic_shutdown() implement

add rk8xx_shutdown for pmic shutdown.
It is used in applications such as UBOOT shutdown charging.

Signed-off-by: Joseph Chen <chenjh@rock-chips.com>
Signed-off-by: Elaine Zhang <zhangqing@rock-chips.com>
---
 drivers/power/pmic/rk8xx.c | 39 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 39 insertions(+)

diff --git a/drivers/power/pmic/rk8xx.c b/drivers/power/pmic/rk8xx.c
index 5f442fea689..f7450dd0c4c 100644
--- a/drivers/power/pmic/rk8xx.c
+++ b/drivers/power/pmic/rk8xx.c
@@ -57,6 +57,44 @@ static int rk8xx_read(struct udevice *dev, uint reg, uint8_t *buff, int len)
 	return 0;
 }
 
+static int rk8xx_shutdown(struct udevice *dev)
+{
+	struct rk8xx_priv *priv = dev_get_priv(dev);
+	u8 val, dev_off;
+	int ret = 0;
+
+	switch (priv->variant) {
+	case RK808_ID:
+		dev_off = BIT(3);
+		break;
+	case RK805_ID:
+	case RK816_ID:
+	case RK818_ID:
+		dev_off = BIT(0);
+		break;
+	default:
+		printf("Unknown PMIC: RK%x\n", priv->variant);
+		return -EINVAL;
+	}
+
+	ret = dm_i2c_read(dev, REG_DEVCTRL, &val, 1);
+	if (ret) {
+		printf("read error from device: %p register: %#x!",
+		       dev, REG_DEVCTRL);
+		return ret;
+	}
+
+	val |= dev_off;
+	ret = dm_i2c_write(dev, REG_DEVCTRL, &val, 1);
+	if (ret) {
+		printf("write error to device: %p register: %#x!",
+		       dev, REG_DEVCTRL);
+		return ret;
+	}
+
+	return 0;
+}
+
 #if CONFIG_IS_ENABLED(PMIC_CHILDREN)
 static int rk8xx_bind(struct udevice *dev)
 {
@@ -171,6 +209,7 @@ static struct dm_pmic_ops rk8xx_ops = {
 	.reg_count = rk8xx_reg_count,
 	.read = rk8xx_read,
 	.write = rk8xx_write,
+	.shutdown = rk8xx_shutdown,
 };
 
 static const struct udevice_id rk8xx_ids[] = {
-- 
2.34.0


From 9038a7237f3428e8948037cbf735fb1dc484e39d Mon Sep 17 00:00:00 2001
From: Samuel Dionne-Riel <samuel@dionne-riel.com>
Date: Sat, 18 Dec 2021 15:28:06 -0500
Subject: [PATCH 3/3] =?UTF-8?q?[HACK]=C2=A0implement=20`do=5Fpoweroff`=20f?=
 =?UTF-8?q?or=20rk8xx?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

In reality this should probably be moved into a "shim" library like
`drivers/power/pmic-poweroff.c`.

Though it's unclear if it would be appropriate, considering that would
not take `rockchip,system-power-controller` into account.

In actuality it will require someone that better knows PMIC, PSCI,
for RK3399 and other devices, to know how to do the correct
implementation.

For the time being, this works.
---
 drivers/firmware/psci.c    |  2 ++
 drivers/power/pmic/rk8xx.c | 27 +++++++++++++++++++++++++++
 2 files changed, 29 insertions(+)

diff --git a/drivers/firmware/psci.c b/drivers/firmware/psci.c
index 657e7eb5aea..eec2f1f24da 100644
--- a/drivers/firmware/psci.c
+++ b/drivers/firmware/psci.c
@@ -210,6 +210,7 @@ void psci_sys_poweroff(void)
 	invoke_psci_fn(PSCI_0_2_FN_SYSTEM_OFF, 0, 0, 0);
 }
 
+#ifndef CONFIG_PMIC_RK8XX // *barfs* (workaround for lack of handling rockchip,system-power-controller)
 #if IS_ENABLED(CONFIG_CMD_POWEROFF) && !IS_ENABLED(CONFIG_SYSRESET_CMD_POWEROFF)
 int do_poweroff(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
 {
@@ -226,6 +227,7 @@ int do_poweroff(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
 	return CMD_RET_FAILURE;
 }
 #endif
+#endif
 
 static const struct udevice_id psci_of_match[] = {
 	{ .compatible = "arm,psci" },
diff --git a/drivers/power/pmic/rk8xx.c b/drivers/power/pmic/rk8xx.c
index f7450dd0c4c..4b873a39baf 100644
--- a/drivers/power/pmic/rk8xx.c
+++ b/drivers/power/pmic/rk8xx.c
@@ -10,6 +10,7 @@
 #include <log.h>
 #include <power/rk8xx_pmic.h>
 #include <power/pmic.h>
+#include <linux/delay.h>
 
 static struct reg_data rk817_init_reg[] = {
 /* enable the under-voltage protection,
@@ -235,3 +236,29 @@ U_BOOT_DRIVER(rockchip_rk805) = {
 };
 
 DM_DRIVER_ALIAS(rockchip_rk805, rockchip_rk808)
+
+#ifdef CONFIG_CMD_POWEROFF
+// TODO: implement handling of: rockchip,system-power-controller
+int do_poweroff(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
+{
+	struct udevice *pmic;
+	int ret;
+
+	ret = uclass_get_device_by_driver(UCLASS_PMIC, DM_DRIVER_GET(rockchip_rk805), &pmic);
+
+	if (ret != 0) {
+		printf("Failure in `do_poweroff` getting PMIC; ret=%d\n", ret);
+		return ret;
+	}
+
+	/* wait uart flush before shutdown */
+	mdelay(5);
+
+	/* PMIC shutdown */
+	pmic_shutdown(pmic);
+
+	panic("Cpu should never reach here, shutdown failed !");
+
+	return 0;
+}
+#endif
-- 
2.34.0
