;;; GNU Guix --- Functional package management for GNU
;;; Copyright Â© 2022 Petr Hodina <phodina@protonmail.com>
;;;
;;; This file is part of GNU Guix.
;;;
;;; GNU Guix is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; GNU Guix is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with GNU Guix.  If not, see <http://www.gnu.org/licenses/>.

(define-module (gnu services speech)
  #:use-module (gnu services base)
  #:use-module (gnu services configuration)
  #:use-module (gnu services shepherd)
  #:use-module (gnu services)
  #:use-module (gnu system pam)
  #:use-module (gnu system shadow)
  #:use-module (guix diagnostics)
  #:use-module (guix gexp)
  #:use-module (guix packages)
  #:use-module (guix records)
  #:use-module (guix store)
  #:use-module (guix ui)
  #:use-module (gnu packages speech)
  #:use-module (ice-9 match)
  #:use-module (srfi srfi-1)
  #:export (mycroft-configuration
            mycroft-service-type))

;;; Commentary:
;;;
;;; Speech services.
;;;
;;; Code:


;;;
;;; Mycroft
;;;

(define-record-type* <mycroft-configuration>
  mycroft-configuration make-mycroft-configuration mycroft-configuration?
;  (mycroft-plugins alsa-configuration-alsa-plugins ;file-like
;                (default mycroft-plugins))
  (mycroft   mycroft-mycroft ;package
                 (default mycroft-core))
  (extra-options mycroft-configuration-extra-options ;string
                 (default "")))

(define mycroft-config-file
  ;; Return the Mycroft configuration file.
  (match-lambda
    (($ <mycroft-configuration> mycroft? extra-options)
     (apply mixed-text-file "mycroft.conf"
            `("# Generated by 'mycroft'.\n\n"
              ,extra-options)))))

(define mycroft-activation
  (match-lambda
    (($ <mycroft-configuration> mycroft extra-options)
     
      #~(begin
          (use-modules (guix build utils))

          (mkdir-p "/var/log/mycroft")))))

(define (mycroft-etc-service config)
  (list `("mycroft/mycroft.conf" ,(mycroft-config-file config))))

(define (mycroft-shepherd-service config)
  "Return a list of <shepherd-service> for CONFIG."
    (list (shepherd-service
           (documentation "Run the Mycroft server.")
           (provision '(mycroft))
           ;(requirement '(networking))
           (start #~(make-forkexec-constructor
                     (list (file-append (mycroft-mycroft config) "/bin/start-mycroft.sh")
                           "all")))
           (stop #~(lambda _
                     (invoke #$(file-append mycroft "/bin/mycroft-stop.sh"))
                     #f)))))

(define mycroft-service-type
  (service-type
   (name 'mycroft)
   (extensions
    (list
    ;(service-extension shepherd-root-service-type mycroft-shepherd-service)
	(service-extension activation-service-type mycroft-activation)
	(service-extension etc-service-type mycroft-etc-service)))
   (default-value (mycroft-configuration))
   (description "Configure Mycroft voice assistant.")))
